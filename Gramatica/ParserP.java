
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.tresdirecciones.gramatica;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserP extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserPSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserP() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\004\003\000" +
    "\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\011\005\001\002\000\004\002\026\001" +
    "\002\000\004\012\006\001\002\000\010\010\007\011\011" +
    "\013\012\001\002\000\016\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\014\ufff8\001\002\000\016\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\014\ufffa\001\002\000\016\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\014\ufff9\001\002" +
    "\000\010\010\007\011\011\013\012\001\002\000\014\002" +
    "\000\004\016\005\014\006\015\007\017\001\002\000\010" +
    "\010\007\011\011\013\012\001\002\000\010\010\007\011" +
    "\011\013\012\001\002\000\010\010\007\011\011\013\012" +
    "\001\002\000\010\010\007\011\011\013\012\001\002\000" +
    "\016\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\014\ufffc" +
    "\001\002\000\016\002\uffff\004\uffff\005\uffff\006\015\007" +
    "\017\014\uffff\001\002\000\016\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\014\ufffd\001\002\000\016\002\ufffe\004" +
    "\ufffe\005\ufffe\006\015\007\017\014\ufffe\001\002\000\014" +
    "\004\016\005\014\006\015\007\017\014\025\001\002\000" +
    "\016\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\014\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\012\004\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\023\004\007\001\001\000\002\001\001\000\006\003\022" +
    "\004\007\001\001\000\006\003\021\004\007\001\001\000" +
    "\006\003\020\004\007\001\001\000\006\003\017\004\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    int cant = 0;

    public ParserP(LexerP lexer) {
        super(lexer);
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr " + symbl_name_from_id(cur_token.sym) + " " + cur_token.left + " - " + cur_token.right);
        System.out.println("Revise que su expresi√≥n sea de la forma: x = /*Expresion numerica*/");
    }
    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserP$actions {
  private final ParserP parser;

  /** Constructor */
  CUP$ParserP$actions(ParserP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserP$do_action_part00000000(
    int                        CUP$ParserP$act_num,
    java_cup.runtime.lr_parser CUP$ParserP$parser,
    java.util.Stack            CUP$ParserP$stack,
    int                        CUP$ParserP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserP$result;

      /* select the action based on the action number */
      switch (CUP$ParserP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT = start_val;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserP$parser.done_parsing();
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= ALFANUMERICO IGUAL inicio 
            {
              Object RESULT =null;

              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= inicio SUMA inicio 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		cant++; System.out.println("t" + cant + ": " + val1 + "+" + val2); RESULT = "t" + cant;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= inicio RESTA inicio 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		cant++; System.out.println("t" + cant + ": " + val1 + "-" + val2); RESULT = "t" + cant;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= inicio MULTIPLICACION inicio 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		cant++; System.out.println("t" + cant + ": " + val1 + "*" + val2); RESULT = "t" + cant;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= inicio DIVISION inicio 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		cant++; System.out.println("t" + cant + ": " + val1 + "/" + val2); RESULT = "t" + cant;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= PARA inicio PARC 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT = val;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= valor 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		RESULT = val;
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor ::= ALFANUMERICO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		RESULT = val.toString();
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("valor",2, ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor ::= NUMERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserP$stack.peek()).value;
		RESULT = val.toString();
              CUP$ParserP$result = parser.getSymbolFactory().newSymbol("valor",2, ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP$stack.peek()), RESULT);
            }
          return CUP$ParserP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserP$do_action(
    int                        CUP$ParserP$act_num,
    java_cup.runtime.lr_parser CUP$ParserP$parser,
    java.util.Stack            CUP$ParserP$stack,
    int                        CUP$ParserP$top)
    throws java.lang.Exception
    {
              return CUP$ParserP$do_action_part00000000(
                               CUP$ParserP$act_num,
                               CUP$ParserP$parser,
                               CUP$ParserP$stack,
                               CUP$ParserP$top);
    }
}

}
